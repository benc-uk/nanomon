name: nanomon

# Docker compose file for nanomon
# Call via make/just, otherwise you'll need to set all the vars manually

services:
  frontend:
    image: ${IMAGE_REG}/${IMAGE_NAME}-frontend:${IMAGE_TAG}
    build:
      context: ..
      dockerfile: ./build/Dockerfile.frontend
      args:
        VERSION: ${VERSION}
        BUILD_INFO: ${BUILD_INFO}
    ports:
      - "8001:8001"
    environment:
      API_ENDPOINT: http://localhost:8000/api
    networks:
      - front

  api:
    image: ${IMAGE_REG}/${IMAGE_NAME}-api:${IMAGE_TAG}
    build:
      context: ..
      dockerfile: ./build/Dockerfile.api
      args:
        VERSION: ${VERSION}
        BUILD_INFO: ${BUILD_INFO}
    ports:
      - "8000:8000"
    environment:
      POSTGRES_DSN: host=database port=5432 user=nanomon dbname=nanomon sslmode=disable
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    restart: always
    networks:
      - back
      - front

  runner:
    image: ${IMAGE_REG}/${IMAGE_NAME}-runner:${IMAGE_TAG}
    build:
      context: ..
      dockerfile: ./build/Dockerfile.runner
      args:
        VERSION: ${VERSION}
        BUILD_INFO: ${BUILD_INFO}
    environment:
      POSTGRES_DSN: host=database port=5432 user=nanomon dbname=nanomon sslmode=disable
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    restart: always
    networks:
      - back

  database:
    image: postgres:17
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: nanomon
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: nanomon
    volumes:
      - db-data:/var/lib/postgresql/data
      - ../sql/init:/docker-entrypoint-initdb.d
    networks:
      - back

networks:
  front:
  back:

volumes:
  db-data:
