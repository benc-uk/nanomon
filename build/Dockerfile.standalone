# ******************************************************************
# ***** SPECIAL STANDALONE IMAGE FOR DEVELOPMENT PURPOSES ONLY *****
# ******************************************************************

# ===================================================================================
# === Stage 1: Build the services 
# ===================================================================================
FROM golang:1.24-alpine AS go-build

# Note these are ALWAYS passed in, so the values here are never used
ARG VERSION="0.0.0"
ARG BUILD_INFO="Not provided"
ARG CGO_ENABLED=0

WORKDIR /build

# Install system dependencies, if CGO_ENABLED=1
RUN if [[ $CGO_ENABLED -eq 1 ]]; then apk update && apk add gcc musl-dev; fi

# Without the root certs the runner can't make really make HTTPS calls
RUN apk add --no-cache ca-certificates

# Fetch and cache Go modules
COPY go.mod .
COPY go.sum .
RUN go mod download

# Copy in Go source files
COPY services/ ./services/

# Now run the build
# Inject version and build details, to be available at runtime 
RUN GO111MODULE=on CGO_ENABLED=$CGO_ENABLED GOOS=linux \
  go build \
  -ldflags "-X main.version=$VERSION -X 'main.buildInfo=$BUILD_INFO'" \
  -o runner nanomon/services/runner

RUN GO111MODULE=on CGO_ENABLED=$CGO_ENABLED GOOS=linux \
  go build \
  -ldflags "-X main.version=$VERSION -X 'main.buildInfo=$BUILD_INFO'" \
  -o api nanomon/services/api

RUN GO111MODULE=on CGO_ENABLED=$CGO_ENABLED GOOS=linux \
  go build \
  -ldflags "-X main.version=$VERSION -X 'main.buildInfo=$BUILD_INFO'" \
  -o frontend nanomon/services/frontend

# ================================================================================================
# === Stage 2: Munge everything into a single image 
# ================================================================================================
FROM bitnami/mongodb:8.0
WORKDIR /app 

# Root certs
COPY --from=go-build /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/

# Copy the standalone script
COPY build/standalone.sh .

# Frontend HTML/JS/CSS
COPY frontend/ .
# Templates are needed just for the runner
COPY ./templates ./templates/

# Copy the Go server binaries
COPY --from=go-build /build/api . 
COPY --from=go-build /build/runner . 
COPY --from=go-build /build/frontend . 

ENV POLLING_INTERVAL=1s
ENV API_ENDPOINT=http://localhost:8000/api
EXPOSE 8000 8001

CMD [ "bash", "./standalone.sh" ]