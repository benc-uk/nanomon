# ===================================================================================
# === Stage 1: Build the API service ================================================
# ===================================================================================
FROM golang:1.23-alpine AS go-build

# Note these are ALWAYS passed in, so the values here are never used
ARG VERSION="0.0.0"
ARG BUILD_INFO="Not provided"
ARG CGO_ENABLED=0

WORKDIR /build

# Install system dependencies, if CGO_ENABLED=1
RUN if [[ $CGO_ENABLED -eq 1 ]]; then apk update && apk add gcc musl-dev; fi

# Fetch and cache Go modules
COPY go.mod .
COPY go.sum .
RUN go mod download

# Copy in Go source files
COPY services/frontend/ ./services/frontend/

# Now run the build
# Inject version and build details, to be available at runtime 
RUN GO111MODULE=on CGO_ENABLED=$CGO_ENABLED GOOS=linux \
  go build \
  -ldflags "-X main.version=$VERSION -X 'main.buildInfo=$BUILD_INFO'" \
  -o frontend nanomon/services/frontend

# ================================================================================================
# === Stage 2: Bundle the frontend app ===========================================================
# ================================================================================================

FROM node:20-alpine AS node-build

WORKDIR /build

# Copy the frontend app source files
COPY frontend/package* ./

# Install dependencies
RUN npm install --silent --ci

# Copy the frontend app source files
COPY frontend/ .
RUN rm -rf public/config.json

# Build the frontend app
RUN npm run build

# ================================================================================================
# === Stage 3: Create the final image ============================================================
# ================================================================================================
FROM scratch
WORKDIR /app 

# Copy the previous stages' artifacts into this stage
COPY --from=go-build /build/frontend . 
COPY --from=node-build /build/dist ./dist

ENV PORT=8001
EXPOSE 8001

# That's it! Just run the server 
CMD [ "./frontend", "-dir", "./dist" ]