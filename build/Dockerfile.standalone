# ******************************************************************
# ***** SPECIAL STANDALONE IMAGE FOR DEVELOPMENT PURPOSES ONLY *****
# ******************************************************************

# ===================================================================================
# === Stage 1: Build the services ===================================================
# ===================================================================================
FROM golang:1.24-alpine AS go-build

# Note these are ALWAYS passed in, so the values here are never used
ARG VERSION="0.0.0"
ARG BUILD_INFO="Not provided"
ARG CGO_ENABLED=0

WORKDIR /build

# Install system dependencies, if CGO_ENABLED=1
RUN if [[ $CGO_ENABLED -eq 1 ]]; then apk update && apk add gcc musl-dev; fi

# Without the root certs the runner can't make really make HTTPS calls
RUN apk add --no-cache ca-certificates

# Fetch and cache Go modules
COPY go.mod .
COPY go.sum .
RUN go mod download

# Copy in Go source files
COPY services/ ./services/

# Now run the build
# Inject version and build details, to be available at runtime 
RUN GO111MODULE=on CGO_ENABLED=$CGO_ENABLED GOOS=linux \
  go build \
  -ldflags "-X main.version=$VERSION -X 'main.buildInfo=$BUILD_INFO'" \
  -o runner nanomon/services/runner

RUN GO111MODULE=on CGO_ENABLED=$CGO_ENABLED GOOS=linux \
  go build \
  -ldflags "-X main.version=$VERSION -X 'main.buildInfo=$BUILD_INFO'" \
  -o api nanomon/services/api

RUN GO111MODULE=on CGO_ENABLED=$CGO_ENABLED GOOS=linux \
  go build \
  -ldflags "-X main.version=$VERSION -X 'main.buildInfo=$BUILD_INFO'" \
  -o frontend nanomon/services/frontend

# ================================================================================================
# === Stage 2: Bundle the frontend app ===========================================================
# ================================================================================================

FROM node:22-alpine AS node-build

WORKDIR /build

# Copy the frontend app source files
COPY frontend/package* ./

# Install dependencies
RUN npm install --silent --ci

# Copy the frontend app source files
COPY frontend/ .
RUN rm -rf public/config.json

# Build the frontend app
RUN npm run build

# ================================================================================================
# === Stage 3: Munge everything into a single image ==============================================
# ================================================================================================
FROM postgres:17

# Set the working directory
WORKDIR /app

# Copy the previous stage's artifacts into this stage
COPY --from=go-build /build/runner .
COPY --from=go-build /build/api .
COPY --from=go-build /build/frontend .  
COPY --from=node-build /build/dist ./dist

# Templates are needed just for the runner
COPY ./templates ./templates/

# Copy SQL initialization scripts
COPY ./sql/init/* /docker-entrypoint-initdb.d/

# Main startup script
COPY build/standalone.sh .

ENV POSTGRES_DSN="host=localhost dbname=nanomon user=postgres sslmode=disable"
ENV API_ENDPOINT=http://localhost:8000/api
EXPOSE 8000 8001

# Set the entrypoint to the startup script
ENTRYPOINT ["/app/standalone.sh"]